<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>内存分配 on Neo VRAINS</title>
    <link>https://www.sdlinks.net/tags/%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D/</link>
    <description>Recent content in 内存分配 on Neo VRAINS</description>
    <generator>Hugo -- 0.143.1</generator>
    <language>en</language>
    <lastBuildDate>Sat, 08 Dec 2018 16:48:49 +0000</lastBuildDate>
    <atom:link href="https://www.sdlinks.net/tags/%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Object Lifetime and Storage Management</title>
      <link>https://www.sdlinks.net/posts/2018/object-lifetime-and-storage-management/</link>
      <pubDate>Sat, 08 Dec 2018 16:48:49 +0000</pubDate>
      <guid>https://www.sdlinks.net/posts/2018/object-lifetime-and-storage-management/</guid>
      <description>&lt;p&gt;在考虑标识符和绑定(&lt;em&gt;bindings&lt;/em&gt;)的时候, 关键在于区分标识符和它们所引用的对象, 以及以下事件:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;对象的创建&lt;/li&gt;
&lt;li&gt;绑定的创建&lt;/li&gt;
&lt;li&gt;所有使用绑定的情况, 诸如引用变量, 子程序, 类型等&lt;/li&gt;
&lt;li&gt;停用和重用那些暂时没有用的绑定&lt;/li&gt;
&lt;li&gt;绑定的析构(&lt;em&gt;destruction&lt;/em&gt;)&lt;/li&gt;
&lt;li&gt;对象的析构&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;绑定的生命周期指的是这个绑定从创建到析构的整个过程, 类似的可以定义对象的生命周期. 通常情况下, 一个对象的生命周期可能会大于对应的绑定的生命周期, 即当
标识符不再引用该对象时, 该对象依然存在(例如在子程序中传入某个对象的引用, 如C++中的&lt;code&gt;&amp;amp;&lt;/code&gt;参数). 当然, 一个绑定的生命周期也有可能大于对应对象的生命周期,
虽然这通常被认为是一个BUG.&lt;/p&gt;
&lt;p&gt;对象的生命周期通常与以下内存分配(&lt;em&gt;storage allocation&lt;/em&gt;)机制有关:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;静态(&lt;em&gt;static&lt;/em&gt;)对象会在程序的整个运行过程中被分配一个绝对地址.&lt;/li&gt;
&lt;li&gt;栈(&lt;em&gt;stack&lt;/em&gt;)对象随着子程序的调用和返回而被创建以及按照LIFO的顺序析构.&lt;/li&gt;
&lt;li&gt;堆(&lt;em&gt;heap&lt;/em&gt;)对象可以在任何时候创建和析构, 其额外要求更加通用和昂贵的内存分配算法.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;静态分配_static-allocation_&#34;&gt;静态分配(&lt;em&gt;static allocation&lt;/em&gt;)&lt;/h2&gt;
&lt;p&gt;静态分配最明显的例子就是全局对象, 当然全局对象不是唯一的例子. 构成程序机器语言翻译的指令也可以认为是静态分配的变量; 数字和字符串的常量当然也是静态分配
的; 另外很多编译器会产生一系列的表用于支持运行时的debug, 动态类型检查, 垃圾回收, 异常处理等, 这些表也都是静态分配的. 静态分配的对象通常希望它们的值
不在变化, 因此经常被分配在被保护的只读的内存中以方便在试图修改其值产生中断并抛出运行时错误.&lt;/p&gt;
&lt;p&gt;在很多语言中,一个具名常量通常要求有一个能够在编译期确定的初始值. 通常这些初始值都被限制在那些已知的常量以及内置的函数. 这些具名常量加上字面常量通常被
叫做表现常量(&lt;em&gt;manifest constants&lt;/em&gt;)或者编译期常量(&lt;em&gt;compile-time constants&lt;/em&gt;). 在某些语言中(C, Ada), 常量仅仅只是那些无法在elaboration
time之后改变的值, 这些值可能依赖与其他在运行时才能确定的值. 这些elaboration-time的常量在作为递归函数的局部变量时必须要分配在栈上. C#显示提供了
声明两种常量的方法, 即&lt;code&gt;const&lt;/code&gt;和&lt;code&gt;readonly&lt;/code&gt;关键字.&lt;/p&gt;
&lt;p&gt;另外编译器通常对于子程序的某些值采用特定的分配策略:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;参数和返回值, 编译器通常会尽可能的将这些值存在寄存器中.&lt;/li&gt;
&lt;li&gt;临时变量, 通常是那些复杂计算过程的中间值, 一个优秀的编译器也会将它们保存在寄存器内.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;bookkeeping information&lt;/em&gt;, 这些通常包含子程序的返回地址.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;基于栈的分配_stack-based-allocation_&#34;&gt;基于栈的分配(&lt;em&gt;stack-based allocation&lt;/em&gt;)&lt;/h2&gt;
&lt;p&gt;一门语言如果想要支持递归, 那么在局部变量上采用静态分配的策略将不再适用(Fortran90之前不支持递归), 因为需要变量的个数是未知的. 所幸的是递归天然地适用
于栈结构的分配策略. 每一个子程序在运行时都有一个栈帧(&lt;em&gt;frame&lt;/em&gt;, 或者称为活动记录, &lt;em&gt;activation record&lt;/em&gt;), 包含了传入参数, 局部变量, 临时变量, 以及
bookkeeping信息. 通常传入参数位于帧的顶部, 方便被调用者定位参数, 而其他的布局则依赖于实现. 栈的维护是子程序调用序列的责任, 即调用者在调用前(序言,
&lt;em&gt;prologue&lt;/em&gt;)和调用后(尾声, &lt;em&gt;epilogue&lt;/em&gt;)执行的代码. 通常有一个帧指针(&lt;em&gt;frame pointer&lt;/em&gt;)来保存当前帧的地址, 在大多数语言的实现中, 栈都是往地址减
小的方向增长的. 在这样的实现方式下, 局部变量, 临时变量, bookkeeping信息对于帧指针有一个负的偏移, 而传入参数和返回对于帧指针则有一个正的偏移, 因为
这些都保存在调用者的帧上.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
