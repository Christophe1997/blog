<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>杂项 on CastOff</title>
    <link>http://www.sdlinks.net/categories/%E6%9D%82%E9%A1%B9/</link>
    <description>Recent content in 杂项 on CastOff</description>
    <generator>Hugo -- 0.143.1</generator>
    <language>en</language>
    <lastBuildDate>Thu, 19 Dec 2019 20:24:17 +0800</lastBuildDate>
    <atom:link href="http://www.sdlinks.net/categories/%E6%9D%82%E9%A1%B9/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>使用hugo生成博客</title>
      <link>http://www.sdlinks.net/posts/2019/%E4%BD%BF%E7%94%A8hugo%E7%94%9F%E6%88%90%E5%8D%9A%E5%AE%A2/</link>
      <pubDate>Thu, 05 Dec 2019 20:29:00 +0800</pubDate>
      <guid>http://www.sdlinks.net/posts/2019/%E4%BD%BF%E7%94%A8hugo%E7%94%9F%E6%88%90%E5%8D%9A%E5%AE%A2/</guid>
      <description>&lt;p&gt;之前一直有使用&lt;a href=&#34;https://hexo.io/zh-cn/index.html&#34;&gt;Hexo&lt;/a&gt;来生成静态博客，如今将博客迁移到了&lt;a href=&#34;https://gohugo.io/&#34;&gt;Hugo&lt;/a&gt;下。两种工具总体而言各有优势，个人此次转移到hugo的主要原因大概是希望能够重拾写博客的习惯，本文主要介绍了使用Hugo的大致流程。首先给出个人博客的文件结构：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Root               # blog根目录
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;|
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;+-- archetypes
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;+-- content
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; |-- posts         # 博客目录
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; |-- _index.md     # 主页
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;+-- data
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;+-- layouts
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;+-- ox-hugo        # org文件位置
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; |-- messy.org     # category为杂项的org文件
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;+-- public         # submodule
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;+-- resource
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;+-- static
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;+-- themes
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; |-- xxx           # 主题文件夹, submodule
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;+-- .git
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;+-- config.toml
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;+-- .dir-locals.el # 自动将org文件转为markdown配置文件
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;+-- .gitmodules
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;其中只有 &lt;code&gt;ox-hugo&lt;/code&gt; 为自定义文件夹, &lt;code&gt;.dir-locals&lt;/code&gt; 为ox-hugo自动转换的配置文件，其他都是自动生成的。接下来个人就hugo生成博客关键部分展开介绍下。&lt;/p&gt;</description>
    </item>
    <item>
      <title>杂记</title>
      <link>http://www.sdlinks.net/posts/2019/%E6%9D%82%E8%AE%B0/</link>
      <pubDate>Mon, 04 Mar 2019 17:12:00 +0000</pubDate>
      <guid>http://www.sdlinks.net/posts/2019/%E6%9D%82%E8%AE%B0/</guid>
      <description>&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;多态(&lt;em&gt;polymorphic&lt;/em&gt;)最早从19世纪希腊语中引入, 其中poly代表很多(&lt;em&gt;many&lt;/em&gt;), morph代表形式(&lt;em&gt;form&lt;/em&gt;), 而-ic的后缀表示由&amp;hellip;制成(&lt;em&gt;made of&lt;/em&gt;). 因此, 多态意味着&amp;quot;made of many form&amp;quot;, 即有许多形式构成. 因此单态(&lt;em&gt;monomorphic&lt;/em&gt;)很容易猜到是&amp;quot;made of one form&amp;quot;. 2019.03.04&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;-ary的后缀表示属于或关于(&lt;em&gt;of or pertaining to&lt;/em&gt;), 在讨论数学上的元数(&lt;em&gt;arity&lt;/em&gt;)时, -ary是公共的后缀, 诸如nullary(零元), unary(一元), binary(二元)等. 2019.03.07&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;我发现gnome-terminal下&lt;code&gt;C-;&lt;/code&gt;会映射成&lt;code&gt;;&lt;/code&gt;,导致我在terminal的emacs中使用快捷键&lt;code&gt;C-x C-;&lt;/code&gt;注释行失败.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://unix.stackexchange.com/questions/116629/how-do-keyboard-input-and-text-output-work/116630#116630&#34;&gt;网上&lt;/a&gt;查阅后发现, 由于gnome-terminal没有&lt;code&gt;C-;&lt;/code&gt;的转义序列(&lt;em&gt;escape sequence&lt;/em&gt;), 而默认的将其识别为&lt;code&gt;;&lt;/code&gt;. 2019.04.13&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;紧接3, 我发现在gnome-terminal下emacs无法使用&lt;code&gt;C-;&lt;/code&gt;, 又懒的配置term. 于是就重新编译了带有GUI的emacs(&lt;code&gt;./configure --with-gnutls=no --without-pop --with-x&lt;/code&gt;), 之后发现其默认会使用Anacnoda的lib, 一开始会报一些&lt;code&gt;libxml2.so: undefined reference to `ucnv_close_58&#39;&lt;/code&gt;, 之后我将&lt;code&gt;LD_LIBRARY_PATH&lt;/code&gt;设置为&lt;code&gt;~/anaconda3/lib&lt;/code&gt;之后, 上述错误没有了, 但又报了新的错误&lt;code&gt;libSM.so: undefined reference to `uuid_unparse_lower@UUID_1.0&#39;&lt;/code&gt;. 解决方法是不使用Anaconda的lib, 而使用系统的lib(export不包含&lt;code&gt;~/anaconda/bin&lt;/code&gt;的&lt;code&gt;PATH&lt;/code&gt;, 随后重新configure和make), 具体原因未查明. 2019.04.13&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;i3-wm的layout-restore的问题. &lt;code&gt;i3-save-tree&lt;/code&gt;生成的json文件无法直接使用, 需要手工修改layout文件, 首先需要包含一个顶层的container, 随后每一个&lt;code&gt;swallows&lt;/code&gt;都需要声明&lt;code&gt;class&lt;/code&gt;和&lt;code&gt;instance&lt;/code&gt;, &lt;code&gt;i3-save-tree&lt;/code&gt;会生成class和instance信息, 当然也可以通过xprop获取. 2019.05.01&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;硬件之上最重要的两种软件是操作系统和编译器, 操作系统提供处理用户应用和硬件的接口, 编译器负责将高级语言编写的程序翻译成低级语言(相对于硬件而言). 2019.05.20&lt;/p&gt;</description>
    </item>
    <item>
      <title>一些Ubuntu安装问题</title>
      <link>http://www.sdlinks.net/posts/2018/some-ubuntu-install-problem/</link>
      <pubDate>Sat, 28 Apr 2018 21:11:36 +0000</pubDate>
      <guid>http://www.sdlinks.net/posts/2018/some-ubuntu-install-problem/</guid>
      <description>&lt;p&gt;One day ago, I started upgrading my Ubuntu 16.04 to 18.04, after I see the update from website. The most diffrience
betwen 16.04 and 18.04 is that the 18.04 use GNOME desktop rather than Unity. I had heard that the GNOME desktop is
better than Unity, so I tried 18.04 for the new desktop. Unfortunately, after I upgraded my OS, I found that the GNOME
desktop wasjust so uncomfortable. And after one hour I gone back to 16.04:(, and content of this article is about the
problems I met while reinstalling the OS.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Git Cheat Sheet</title>
      <link>http://www.sdlinks.net/posts/2018/git-cheat-sheet/</link>
      <pubDate>Sun, 11 Mar 2018 13:07:40 +0000</pubDate>
      <guid>http://www.sdlinks.net/posts/2018/git-cheat-sheet/</guid>
      <description>&lt;h2 id=&#34;本地操作&#34;&gt;本地操作&lt;/h2&gt;
&lt;h3 id=&#34;状态检览&#34;&gt;状态检览&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ git status -s
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;XY PATH1 -&amp;gt; PATH2
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;PATH2只有在PATH1关联到不同的路径时才会显示(例如, 文件重命名).&lt;/p&gt;
&lt;p&gt;XY是两个状态码, 在合并冲突的时候, X和Y分别表示合并双方的修改状态; 而在一般情况下X表示暂存区域(&lt;em&gt;index&lt;/em&gt;)的状态, Y表示工作目录的状态(&lt;em&gt;work tree&lt;/em&gt;):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&amp;rsquo; &amp;rsquo; = unmodified&lt;/li&gt;
&lt;li&gt;M = modified&lt;/li&gt;
&lt;li&gt;A = added&lt;/li&gt;
&lt;li&gt;D = deleted&lt;/li&gt;
&lt;li&gt;R = renamed&lt;/li&gt;
&lt;li&gt;C = copied&lt;/li&gt;
&lt;li&gt;U = updated but unmerged&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;未被追踪(&lt;em&gt;untracked&lt;/em&gt;)的文件, XY = ??; 默认不显示忽略的文件(&lt;em&gt;ignored&lt;/em&gt;), 除非使用&lt;code&gt;--ignore&lt;/code&gt;选项, 此时XY = !!.&lt;/p&gt;
&lt;h3 id=&#34;查看已暂存和未暂存的修改&#34;&gt;查看已暂存和未暂存的修改&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ git diff
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;用来比较工作目录中当前文件和暂存区域快照之间的差异, 使用&lt;code&gt;--staged&lt;/code&gt;选项查看已经暂存的将要添加到下次修改的内容&lt;/p&gt;
&lt;h3 id=&#34;提交更新&#34;&gt;提交更新&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ git commit
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;这种方式会启动shell的环境变量&lt;code&gt;$EDDITOR&lt;/code&gt;所指定的软件, 一般是VIM或emacs, 或者使用&lt;code&gt;git	config	--global	core.editor&lt;/code&gt;来指定编辑器,
使用&lt;code&gt;-v&lt;/code&gt;选项将&lt;code&gt;diff&lt;/code&gt;的内容追加到编辑器中, 使用&lt;code&gt;-m &#39;${comment}&#39;&lt;/code&gt;选项来直接添加提交信息, 而不打开编辑器.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
